// QuotationForm.jsx ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
import React, { useState, useEffect } from 'react';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import '../fonts/THSarabun';
import { useNavigate } from 'react-router-dom';



function generateQuotationNumber() {
  const today = new Date();
  const dateStr = today.toISOString().split('T')[0].replace(/-/g, ''); // YYYYMMDD
  return `QT-${dateStr}`;
}


export default function QuotationForm({ company }) {
  const [quotationNumber] = useState(generateQuotationNumber());
  const [clientName, setClientName] = useState('');
  const [clientPhone, setClientPhone] = useState('');
  const [items, setItems] = useState([{ name: '', quantity: 1, price: 0 }]);
  const clearCache = () => {
      sessionStorage.removeItem('quotationClientName');
      sessionStorage.removeItem('quotationItems');
      setClientName('');
      setItems([{ name: '', quantity: '', price: '' }]);
    };
  const [notes, setNotes] = useState(['']);;
  const [paymentTerms, setPaymentTerms] = useState(['']);

  const handlePaymentTermChange = (index, value) => {
    const updated = [...paymentTerms];
    updated[index] = value;
    setPaymentTerms(updated);
  };

  const addPaymentTerm = () => {
    setPaymentTerms([...paymentTerms, '']);
  };

  const removePaymentTerm = (index) => {
    const updated = paymentTerms.filter((_, i) => i !== index);
    setPaymentTerms(updated);
  };

  const [includeVAT, setIncludeVAT] = useState(true);

  const navigate = useNavigate();


  useEffect(() => {
    const cachedClient = sessionStorage.getItem('quotationClientName');
    const cachedItems = sessionStorage.getItem('quotationItems');
    if (cachedClient) setClientName(cachedClient);
    if (cachedItems) setItems(JSON.parse(cachedItems));
  }, []);

  const addItem = () => {
    setItems([...items, { name: '', quantity: 1, price: 0 }]);
  };

  const handleItemChange = (index, field, value) => {
  const newItems = [...items];
  newItems[index][field] = value; // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô string ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
  setItems(newItems);
};

  const handleNoteChange = (index, value) => {
    const updatedNotes = [...notes];
    updatedNotes[index] = value;
    setNotes(updatedNotes);
  };

  const addNote = () => {
    setNotes([...notes, '']);
  };

  const removeNote = (index) => {
    const updatedNotes = notes.filter((_, i) => i !== index);
    setNotes(updatedNotes);
  };

  const generatePDF = () => {
    const doc = new jsPDF();
    doc.setFont('THSarabun');

    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
    if (company.logo) {
      doc.addImage(company.logo, 'PNG', 14, 10, 30, 30);
    }

    // ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
    doc.setFont('THSarabun');
    doc.setFontSize(14);
    doc.text(company.name || '', 50, 15);
    doc.text(company.address || '', 50, 21);
    doc.text(`‡πÇ‡∏ó‡∏£: ${company.phone || ''} | ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${company.email || ''}`, 50, 27);

    // ‚úÖ ‡∏´‡∏±‡∏ß‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
    doc.setFont('THSarabun');
    doc.setFontSize(18);
    doc.text('‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤', 14, 50);
    doc.setFontSize(14);
    doc.text(`‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤: ${quotationNumber}`, 190, 60, { align: 'right' }); // ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    doc.setFontSize(14);
    doc.text(`‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${clientName}`, 14, 60);
    doc.text(`‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${clientPhone}`, 14, 66);

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    const tableData = items.map((item) => [
      item.name,
      item.quantity,
      item.price,
      (Number(item.quantity) * Number(item.price)).toFixed(2),
    ]);

    const today = new Date().toLocaleDateString('th-TH', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    doc.text(`‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${today}`, 190, 50, { align: 'right' }); // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á x,y ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£


    autoTable(doc, {
      startY: 75,
      head: [['‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤/‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢', '‡∏£‡∏ß‡∏°']],
      body: tableData,
      styles: {
        font: 'THSarabun',
        fontStyle: 'normal',
        fontSize: 14,
      },
      headStyles: {
        font: 'THSarabun',
        fontStyle: 'normal',
        fontSize: 14,
        fillColor: [41, 128, 185], // ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
        textColor: [255, 255, 255],
        halign: 'left',
      },
      bodyStyles: {
        font: 'THSarabun',
        fontStyle: 'normal',
        fontSize: 14,
        halign: 'left',
      },
    });

    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const subtotal = items.reduce(
      (sum, item) => sum + Number(item.quantity) * Number(item.price),
      0
    );
    const vat = includeVAT ? subtotal * 0.07 : 0;
    const grandTotal = subtotal + vat;
    
    const totalY = doc.lastAutoTable.finalY + 10;

    if (includeVAT) {
      doc.text('‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô', 130, totalY);
      doc.text(`${subtotal.toFixed(2)} ‡∏ö‡∏≤‡∏ó`, 180, totalY, { align: 'right' });

      doc.text('‡∏†‡∏≤‡∏©‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° 7 %', 120, totalY + 7);
      doc.text(`${vat.toFixed(2)} ‡∏ö‡∏≤‡∏ó`, 180, totalY + 7, { align: 'right' });

      doc.text('‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô', 120, totalY + 14);
      doc.text(`${grandTotal.toFixed(2)} ‡∏ö‡∏≤‡∏ó`, 180, totalY + 14, { align: 'right' });
    } else {
      doc.text('‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô', 130, totalY);
      doc.text(`${subtotal.toFixed(2)} ‡∏ö‡∏≤‡∏ó`, 180, totalY, { align: 'right' });

      doc.text('‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô', 120, totalY + 7);
      doc.text(`${subtotal.toFixed(2)} ‡∏ö‡∏≤‡∏ó`, 180, totalY + 7, { align: 'right' });
    }


    let noteY = doc.lastAutoTable.finalY + 10;
    doc.setFontSize(14);
    doc.text('‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:', 14, noteY);
    notes.forEach((n, idx) => {
      noteY += 7;
      doc.text(`- ${n}`, 20, noteY);
    });

    let termY = noteY + 15;
    doc.setFontSize(14);
    doc.text('‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:', 14, termY);
    paymentTerms.forEach((t, idx) => {
      termY += 7;
      doc.text(`- ${t}`, 20, termY);
    });

    // ‚úÖ ‡∏Å‡πà‡∏≠‡∏ô doc.save(...)
    sessionStorage.setItem('quotationClientName', clientName);
    sessionStorage.setItem('quotationItems', JSON.stringify(items));


    doc.save('quotation.pdf');
  };

  return (
   <div className="max-w-3xl mx-auto bg-white p-6 rounded-lg shadow space-y-5">
      <h2 className="text-2xl font-bold text-gray-800 flex items-center gap-2">
        üßæ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
      </h2>

      <p className="text-sm text-gray-500">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤: <span className="font-mono text-black">{quotationNumber}</span></p>

      {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ */}
      <input
        type="text"
        placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"
        value={clientName}
        onChange={(e) => setClientName(e.target.value)}
        className="w-full border rounded px-4 py-2 text-sm"
      />

      {/* ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ */}
      <input
        type="text"
        placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"
        value={clientPhone}
        onChange={(e) => setClientPhone(e.target.value)}
        className="w-full border rounded px-4 py-2 text-sm"
      />

      {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
      <div className="space-y-2">
        {items.map((item, index) => (
          <div key={index} className="grid grid-cols-4 gap-3">
            <input
              type="text"
              placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"
              value={item.name}
              onChange={(e) => handleItemChange(index, 'name', e.target.value)}
              className="border rounded px-3 py-2 text-sm"
            />
            <input
              type="number"
              placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"
              value={item.quantity}
              onChange={(e) => handleItemChange(index, 'quantity', e.target.value)}
              className="border rounded px-3 py-2 text-sm"
            />
            <input
              type="number"
              placeholder="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"
              value={item.price}
              onChange={(e) => handleItemChange(index, 'price', e.target.value)}
              className="border rounded px-3 py-2 text-sm"
            />
            {index === items.length - 1 ? (
              <button
                onClick={addItem}
                className="text-blue-600 hover:underline text-sm whitespace-nowrap"
              >
                + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
              </button>
            ) : (
              <span></span> // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ layout ‡πÄ‡∏û‡∏µ‡πâ‡∏¢‡∏ô
            )}
          </div>
        ))}
      </div>

      <div className="flex items-center gap-2">
        <input
          type="checkbox"
          checked={includeVAT}
          onChange={() => setIncludeVAT(!includeVAT)}
          id="vat-toggle"
        />
        <label htmlFor="vat-toggle" className="text-sm text-gray-700">‡∏£‡∏ß‡∏°‡∏†‡∏≤‡∏©‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° 7%</label>
      </div>

      {/* ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ */}
      <div className="mt-6">
        <h3 className="text-md font-semibold mb-2">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</h3>

        {notes.map((note, index) => (
          <div key={index} className="flex items-center gap-2 mb-2">
            <input
              type="text"
              value={note}
              onChange={(e) => handleNoteChange(index, e.target.value)}
              placeholder={`‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ #${index + 1}`}
              className="flex-1 px-3 py-2 border rounded-md text-sm"
            />
            {notes.length > 1 && (
              <button
                onClick={() => removeNote(index)}
                className="text-red-500 hover:underline text-sm"
              >
                ‚ùå
              </button>
            )}
          </div>
        ))}

        <button
          onClick={addNote}
          className="border rounded px-3 py-2 text-sm hover:bg-gray-100"
        >
          ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
        </button>
      </div>

      <div className="mt-6">
        <h3 className="text-md font-semibold mb-2">‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h3>

        {paymentTerms.map((term, index) => (
          <div key={index} className="flex items-center gap-2 mb-2">
            <input
              type="text"
              value={term}
              onChange={(e) => handlePaymentTermChange(index, e.target.value)}
              placeholder={`‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç #${index + 1}`}
              className="flex-1 px-3 py-2 border rounded-md text-sm"
            />
            {paymentTerms.length > 1 && (
              <button
                onClick={() => removePaymentTerm(index)}
                className="text-red-500 hover:underline text-sm"
              >
                ‚ùå
              </button>
            )}
          </div>
        ))}

        <button
          onClick={addPaymentTerm}
          className="border rounded px-3 py-2 text-sm hover:bg-gray-100"
        >
          ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
        </button>
      </div>


      {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á ‡πÜ */}
      <div className="flex flex-wrap gap-3 pt-2">
        <button onClick={() => navigate('/company-form')} className="bg-gray-600 text-white px-4 py-2 rounded hover:bg-gray-700 text-sm">
          üîß ‡πÅ‡∏Å‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
        </button>
        <button onClick={generatePDF} className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 text-sm">
          üìÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
        </button>
        <button onClick={clearCache} className="bg-gray-400 text-white px-4 py-2 rounded hover:bg-gray-500 text-sm">
          üóë ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        </button>
      </div>
    </div>
  );
}
